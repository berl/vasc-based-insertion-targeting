#!/usr/local/bin/python

import os
import numpy as np
import cPickle as p

from vasc.util import *
import parser
from vasc import util 
from vasc import characterize
from vasc import subtractfound
from vasc.prepostmatcher import PrePostMatcher
from vasc.probeplacer import ProbePlacer, create_probe
from vasc.swc import SWC

def place_and_register(pre, post, args, mpp, psize):
    probe_placer = ProbePlacer(psize, args.probe_depth, mpp, 
                               stack=post)
    if not hasattr(probe_placer, 'info'):
        raise Exception('placement for probe not selected, terminating '
                        'execution')
    pp_matcher = PrePostMatcher(post=post, pre=pre)
    if not hasattr(pp_matcher, 'info'):
        raise Exception('pre and post stacks not registered, terminating '
                        'execution')
    # reconcile coordinates
    pplace_info = probe_placer.info
    pp_match_info = pp_matcher.info
    # extract probe column
    pre_rot = pp_match_info['xy_ang']
    x_off, y_off = pp_match_info['x'], pp_match_info['y']
    xy_adj = pre_rot + pplace_info['xy_ang']
    probe = probe_placer.get_probe(xy=xy_adj)
    # find x,y in rotated pre
    x, y = pplace_info['x'] - x_off, pplace_info['y'] - y_off
    # find z-offset from pre
    z = pplace_info['offset'] - pp_match_info['offset']
    x, y = util.rotate_in_plane((x,y), (0,0), pre_rot)

    return x, y, z, xy_adj, pplace_info['yz_ang'], pplace_info['xz_ang']

if __name__ == '__main__':
    parser = parser.damage_quant_parser()
    args = parser.parse_args()
    mpp = args.microns_per_pixel
    cachename = create_cachename(args)
    cacheplace = os.path.expanduser('~/.vasctargetcache/')
    if not os.path.isdir(cacheplace):
        os.mkdir(cacheplace)
    used_cache = False
    pre = load_img(args.pre)
    probe_size = (args.probe_length, args.probe_width)
    if args.look_cache and cachename in os.listdir(cacheplace):
        x, y, z, xy, yz, xz = p.load(open(cacheplace+cachename, 'rb'))
        print (x, y, z, xy, yz, xz)
        used_cache = True
    else:
        post = load_img(args.post) 
        x, y, z, xy, yz, xz = place_and_register(pre, post, args, mpp, 
                                                 probe_size)
    if args.cache and not used_cache:
        print (x, y, z, xy, yz, xz)
        p.dump((x, y, z, xy, yz, xz), open(cacheplace+cachename, 'wb'))
    g_rep = SWC(args.swc_path, microns_perpixel=mpp)
    g_rep.vertexify()
    es = g_rep.check_graph_soundness()
    assert len(es[0]) == 0 and len(es[1]) == 0 and len(es[2]) == 0
    segment_id_map = load_mask(args.sid_map, g_rep, pre.shape)
    piece_id_map = load_mask(args.pid_map, g_rep, pre.shape)
    binary_seg_map = load_mask(args.b_map, g_rep, pre.shape, True)
    aoes = {}
    for b in args.aoe_buffers:
        probe = create_probe(probe_size, args.probe_depth, xy=xy, yz=yz, xz=xz,
                             buff=b)
        z_buffed = z + b/2
        z_p, y_p, x_p = probe.shape
        z_end = min(z_p + z_buffed, pre.shape[0])
        px_b, px_e, x_b, x_e = decide_dim(x, x_p, pre.shape[2], 'left', 
                                          'right')
        py_b, py_e, y_b, y_e = decide_dim(y, y_p, pre.shape[1], 'high', 'low')
        pre_size = probe.size
        columns, probe = extract_column(x_b, px_b, x_e, px_e, y_b, py_b, y_e, 
                                        py_e, z_buffed, z_end, probe, 
                                        sid_map=segment_id_map, 
                                        pid_map=piece_id_map,
                                        binary_map=binary_seg_map)
        percent_included = float(probe.size) / pre_size
        characteristics = characterize.characterize_insertion(columns, g_rep,
                                                              percentile=90)
        aoes[b] = (characteristics, percent_included)
