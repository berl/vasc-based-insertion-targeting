#!/usr/local/bin/python

import os
import warnings
import numpy as np
import cPickle as p
from scipy.ndimage import gaussian_filter

import parser
from vasc import util 
from vasc import characterize
from vasc import subtractfound
from vasc.tiff import tifffile as tiff
from vasc.prepostmatcher import PrePostMatcher
from vasc.probeplacer import ProbePlacer, create_probe
from vasc.swc import SWC

def place_and_register(pre, post, args, mpp, psize):
    probe_placer = ProbePlacer(psize, args.probe_depth, mpp, 
                               stack=post)
    if not hasattr(probe_placer, 'info'):
        raise Exception('placement for probe not selected, terminating '
                        'execution')
    pp_matcher = PrePostMatcher(post=post, pre=pre)
    if not hasattr(pp_matcher, 'info'):
        raise Exception('pre and post stacks not registered, terminating '
                        'execution')
    # reconcile coordinates
    pplace_info = probe_placer.info
    pp_match_info = pp_matcher.info
    # extract probe column
    pre_rot = pp_match_info['xy_ang']
    x_off, y_off = pp_match_info['x'], pp_match_info['y']
    xy_adj = pre_rot + pplace_info['xy_ang']
    probe = probe_placer.get_probe(xy=xy_adj)
    # find x,y in rotated pre
    x, y = pplace_info['x'] - x_off, pplace_info['y'] - y_off
    # find z-offset from pre
    z = pplace_info['offset'] - pp_match_info['offset']
    x, y = util.rotate_in_plane((x,y), (0,0), pre_rot)

    return x, y, z, xy_adj, pplace_info['yz_ang'], pplace_info['xz_ang']

def decide_dim(d, d_p, constraint, side1, side2):
    if d - d_p/2. >= 0:
        d_b = d - d_p/2.
        pd_b = 0
    else:
        d_b = 0
        warnings.warn('probe truncated on '+side1+' side', RuntimeWarning)
        pd_b = - d-d_p/2.
    if d + d_p/2. <= constraint:
        d_e = d + d_p/2.
        pd_e = d_p
    else:
        d_e = constraint
        warnings.warn('probe truncated on '+side2+' side', RuntimeWarning)
        pd_e = - (d + d_p/2. - constraint)
    return pd_b, pd_e, d_b, d_e

def extract_column(x_b, px_b, x_e, px_e, y_b, py_b, y_e, py_e, z, z_end, probe,
                   **kwargs):
    cols = {}
    if z < 0:
        probe = probe[-z:z_end-z, py_b:py_e, px_b:px_e]        
        for key in kwargs.keys():
            col = kwargs[key][:z_end, y_b:y_e, x_b:x_e]
            cols[key] = col * probe
        
    else:
        probe = probe[:z_end, py_b:py_e, px_b:px_e]
        for key in kwargs.keys():
            col = kwargs[key][z:z_end, y_b:y_e, x_b:x_e]
            cols[key] = col * probe
    return cols, probe    

def create_cachename(args):
    combname = os.path.abspath(args.pre) + '___' + os.path.abspath(args.post)
    return combname.replace('/','l').replace('.','-')

def load_imgdir(path):
    files = os.listdir(path)
    files = filter(lambda x: os.path.splitext(x)[-1] == '.tif', files)
    for i,f in enumerate(sorted(files)):
        im = os.path.join(path, f)
        img = tiff.imread(im)
        if i == 0: 
            stack = np.empty((len(files), img.shape[0], img.shape[1]))
        stack[i] = img
    return img

def load_img(img_path, raw=False, saturate=None, gf=False, bits=8, 
             mask=False):
    if os.path.isdir(img_path):
        img = load_imgdir(img_path)
    elif os.path.isfile(img_path):
        img = tiff.imread(img_path)
    else:
        raise IOError('img path does not exist or something')
    if not raw:
        for layer in img:
            if saturate is not None:
                lmax = np.around(np.percentile(layer, 100 - saturate))
                layer[layer >= lmax] = lmax
            else:
                lmax = float(layer.max())
            lmin = float(layer.min())
            lmax = lmax - lmin
            layer = (layer - lmin) / lmax
            layer = layer * 2**bits          
        if gf:
            img = gaussian_filter(img, 2)
        img = np.around(img)
        img = img.astype('uint'+str(bits))
    return img

def load_mask(mask_path, swc, shape, binary=False):
    mask = load_img(mask_path, raw=True)
    print 'howdy',mask.shape
    if binary:
        mask[mask == mask.max()] = 1
    if shape != mask.shape:
        mask = subtractfound.resize_mask(swc=swc, mask=mask, imshape=shape)
    print 'heyho',mask.shape
    return mask

if __name__ == '__main__':
    parser = parser.damage_quant_parser()
    args = parser.parse_args()
    mpp = args.microns_per_pixel
    cachename = create_cachename(args)
    cacheplace = os.path.expanduser('~/.vasctargetcache/')
    if not os.path.isdir(cacheplace):
        os.mkdir(cacheplace)
    used_cache = False
    pre = load_img(args.pre)
    probe_size = (args.probe_length, args.probe_width)
    if args.look_cache and cachename in os.listdir(cacheplace):
        x, y, z, xy, yz, xz = p.load(open(cacheplace+cachename, 'rb'))
        print (x, y, z, xy, yz, xz)
        used_cache = True
    else:
        post = load_img(args.post) 
        x, y, z, xy, yz, xz = place_and_register(pre, post, args, mpp, 
                                                 probe_size)
    if args.cache and not used_cache:
        print (x, y, z, xy, yz, xz)
        p.dump((x, y, z, xy, yz, xz), open(cacheplace+cachename, 'wb'))
    g_rep = SWC(args.swc_path, microns_perpixel=mpp)
    g_rep.vertexify()
    es = g_rep.check_graph_soundness()
    assert len(es[0]) == 0 and len(es[1]) == 0 and len(es[2]) == 0
    segment_id_map = load_mask(args.sid_map, g_rep, pre.shape)
    piece_id_map = load_mask(args.pid_map, g_rep, pre.shape)
    binary_seg_map = load_mask(args.b_map, g_rep, pre.shape, True)
    aoes = {}
    for b in args.aoe_buffers:
        probe = create_probe(probe_size, args.probe_depth, xy=xy, yz=yz, xz=xz,
                             buff=b)
        z_buffed = z + b/2
        z_p, y_p, x_p = probe.shape
        z_end = min(z_p + z_buffed, pre.shape[0])
        px_b, px_e, x_b, x_e = decide_dim(x, x_p, pre.shape[2], 'left', 
                                          'right')
        py_b, py_e, y_b, y_e = decide_dim(y, y_p, pre.shape[1], 'high', 'low')
        pre_size = probe.size
        columns, probe = extract_column(x_b, px_b, x_e, px_e, y_b, py_b, y_e, 
                                        py_e, z_buffed, z_end, probe, 
                                        sid_map=segment_id_map, 
                                        pid_map=piece_id_map,
                                        binary_map=binary_seg_map)
        percent_included = float(probe.size) / pre_size
        characteristics = characterize.characterize_insertion(columns, g_rep,
                                                              percentile=90)
        aoes[b] = (characteristics, percent_included)
